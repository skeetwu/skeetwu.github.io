{"meta":{"title":"Tiaobug","subtitle":"Skeet WU blogs","description":"","author":"Skeet WU","url":"http://www.tiaobug.com","root":"/"},"pages":[{"title":"categories","date":"2020-11-09T06:31:12.446Z","updated":"2020-11-09T06:31:12.446Z","comments":true,"path":"categories/index.html","permalink":"http://www.tiaobug.com/categories/index.html","excerpt":"","text":""},{"title":"关于我","date":"2021-04-14T08:29:49.442Z","updated":"2021-04-14T08:29:49.442Z","comments":true,"path":"about/index.html","permalink":"http://www.tiaobug.com/about/index.html","excerpt":"","text":"Work @ Nokia, live in Qingdao, China 10+ years work experience in Communications &amp; Internet area Java/Python Linux Kubernates/CaaS 8+ years experience as Technical Leader Ping Me Email: i@tiaboug.comPage: www.tiaobug.comTwitter: https://twitter.com/tiaobugGithub: https://github.com/skeetwu"},{"title":"tags","date":"2020-11-09T06:31:12.460Z","updated":"2020-11-09T06:31:12.460Z","comments":true,"path":"tags/index.html","permalink":"http://www.tiaobug.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在python字典组成的数组中，按照其中的字典的一个key的值进行排序","slug":"2021-05-27-在python字典组成的数组中，按照其中的字典的一个key的值进行排序","date":"2021-05-27T09:12:00.000Z","updated":"2021-05-27T09:18:49.437Z","comments":true,"path":"2021/05/27/2021-05-27-在python字典组成的数组中，按照其中的字典的一个key的值进行排序/","link":"","permalink":"http://www.tiaobug.com/2021/05/27/2021-05-27-%E5%9C%A8python%E5%AD%97%E5%85%B8%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%AD%EF%BC%8C%E6%8C%89%E7%85%A7%E5%85%B6%E4%B8%AD%E7%9A%84%E5%AD%97%E5%85%B8%E7%9A%84%E4%B8%80%E4%B8%AAkey%E7%9A%84%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/","excerpt":"","text":"对接海康的系统，取出客流信息后，发现返回的结果是乱序的, 并没有按照时间先后顺序排列。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172[ &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 28, \"flowOutNum\": 17, \"holdValue\": 0, \"createTime\": 1622070960029, \"updateTime\": 1622073660035, \"statTime\": \"2021-05-27T07:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 25, \"flowOutNum\": 44, \"holdValue\": 0, \"createTime\": 1622103360028, \"updateTime\": 1622106060028, \"statTime\": \"2021-05-27T16:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 40, \"flowOutNum\": 33, \"holdValue\": 0, \"createTime\": 1622078160028, \"updateTime\": 1622080920032, \"statTime\": \"2021-05-27T09:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 33, \"flowOutNum\": 41, \"holdValue\": 0, \"createTime\": 1622081760029, \"updateTime\": 1622084460028, \"statTime\": \"2021-05-27T10:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 28, \"flowOutNum\": 30, \"holdValue\": 0, \"createTime\": 1622096160028, \"updateTime\": 1622098860029, \"statTime\": \"2021-05-27T14:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 32, \"flowOutNum\": 24, \"holdValue\": 0, \"createTime\": 1622092560213, \"updateTime\": 1622095260028, \"statTime\": \"2021-05-27T13:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622045760027, \"updateTime\": 1622048460027, \"statTime\": \"2021-05-27T00:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622056560027, \"updateTime\": 1622059260043, \"statTime\": \"2021-05-27T03:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622049360031, \"updateTime\": 1622052060029, \"statTime\": \"2021-05-27T01:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 15, \"flowOutNum\": 21, \"holdValue\": 0, \"createTime\": 1622063760027, \"updateTime\": 1622066460027, \"statTime\": \"2021-05-27T05:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 29, \"flowOutNum\": 19, \"holdValue\": 0, \"createTime\": 1622067360029, \"updateTime\": 1622070060027, \"statTime\": \"2021-05-27T06:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622052960029, \"updateTime\": 1622055660027, \"statTime\": \"2021-05-27T02:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 2, \"holdValue\": 0, \"createTime\": 1622060160028, \"updateTime\": 1622062861776, \"statTime\": \"2021-05-27T04:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 30, \"flowOutNum\": 28, \"holdValue\": 0, \"createTime\": 1622074560035, \"updateTime\": 1622077260037, \"statTime\": \"2021-05-27T08:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 19, \"flowOutNum\": 51, \"holdValue\": 0, \"createTime\": 1622085360028, \"updateTime\": 1622088060029, \"statTime\": \"2021-05-27T11:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 27, \"flowOutNum\": 23, \"holdValue\": 0, \"createTime\": 1622088960033, \"updateTime\": 1622091660029, \"statTime\": \"2021-05-27T12:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 16, \"flowOutNum\": 21, \"holdValue\": 0, \"createTime\": 1622099760030, \"updateTime\": 1622102460029, \"statTime\": \"2021-05-27T15:00:00.000+08:00\" &#125;] Python的 sorted 内置函数提供了一个lambda 参数可以对它排序。 12data = hik_http_request(url, body).json()['data']['list']return sorted(data, key=lambda e: e.__getitem__('createTime')) 排序后的结果: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182[ &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622045760027, \"updateTime\": 1622048460027, \"statTime\": \"2021-05-27T00:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622049360031, \"updateTime\": 1622052060029, \"statTime\": \"2021-05-27T01:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622052960029, \"updateTime\": 1622055660027, \"statTime\": \"2021-05-27T02:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 0, \"holdValue\": 0, \"createTime\": 1622056560027, \"updateTime\": 1622059260043, \"statTime\": \"2021-05-27T03:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 0, \"flowOutNum\": 2, \"holdValue\": 0, \"createTime\": 1622060160028, \"updateTime\": 1622062861776, \"statTime\": \"2021-05-27T04:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 15, \"flowOutNum\": 21, \"holdValue\": 0, \"createTime\": 1622063760027, \"updateTime\": 1622066460027, \"statTime\": \"2021-05-27T05:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 29, \"flowOutNum\": 19, \"holdValue\": 0, \"createTime\": 1622067360029, \"updateTime\": 1622070060027, \"statTime\": \"2021-05-27T06:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 28, \"flowOutNum\": 17, \"holdValue\": 0, \"createTime\": 1622070960029, \"updateTime\": 1622073660035, \"statTime\": \"2021-05-27T07:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 30, \"flowOutNum\": 28, \"holdValue\": 0, \"createTime\": 1622074560035, \"updateTime\": 1622077260037, \"statTime\": \"2021-05-27T08:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 40, \"flowOutNum\": 33, \"holdValue\": 0, \"createTime\": 1622078160028, \"updateTime\": 1622080920032, \"statTime\": \"2021-05-27T09:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 33, \"flowOutNum\": 41, \"holdValue\": 0, \"createTime\": 1622081760029, \"updateTime\": 1622084460028, \"statTime\": \"2021-05-27T10:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 19, \"flowOutNum\": 51, \"holdValue\": 0, \"createTime\": 1622085360028, \"updateTime\": 1622088060029, \"statTime\": \"2021-05-27T11:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 27, \"flowOutNum\": 23, \"holdValue\": 0, \"createTime\": 1622088960033, \"updateTime\": 1622091660029, \"statTime\": \"2021-05-27T12:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 32, \"flowOutNum\": 24, \"holdValue\": 0, \"createTime\": 1622092560213, \"updateTime\": 1622095260028, \"statTime\": \"2021-05-27T13:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 28, \"flowOutNum\": 30, \"holdValue\": 0, \"createTime\": 1622096160028, \"updateTime\": 1622098860029, \"statTime\": \"2021-05-27T14:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 16, \"flowOutNum\": 21, \"holdValue\": 0, \"createTime\": 1622099760030, \"updateTime\": 1622102460029, \"statTime\": \"2021-05-27T15:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 25, \"flowOutNum\": 44, \"holdValue\": 0, \"createTime\": 1622103360028, \"updateTime\": 1622106060028, \"statTime\": \"2021-05-27T16:00:00.000+08:00\" &#125;, &#123; \"groupId\": \"b5900064-b435-4886-8061-2ba39148c7c6\", \"groupName\": \"主入口\", \"flowInNum\": 7, \"flowOutNum\": 8, \"holdValue\": 0, \"createTime\": 1622106960027, \"updateTime\": 1622106960027, \"statTime\": \"2021-05-27T17:00:00.000+08:00\" &#125;]","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"},{"name":"Python","slug":"Python","permalink":"http://www.tiaobug.com/tags/Python/"}]},{"title":"使用layui时，由jinja2动态生成的checkbox，如何在赋值的时候选中","slug":"2021-04-14-使用layui时由jinja2动态生成的checkbox如何在赋值的时候选中","date":"2021-04-14T08:11:00.000Z","updated":"2021-04-15T08:50:23.296Z","comments":true,"path":"2021/04/14/2021-04-14-使用layui时由jinja2动态生成的checkbox如何在赋值的时候选中/","link":"","permalink":"http://www.tiaobug.com/2021/04/14/2021-04-14-%E4%BD%BF%E7%94%A8layui%E6%97%B6%E7%94%B1jinja2%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E7%9A%84checkbox%E5%A6%82%E4%BD%95%E5%9C%A8%E8%B5%8B%E5%80%BC%E7%9A%84%E6%97%B6%E5%80%99%E9%80%89%E4%B8%AD/","excerpt":"","text":"官网的例子 https://www.layui.com/demo/form.html 1234567891011&lt;div class=\"layui-input-block\"&gt; &lt;input type=\"checkbox\" name=\"like[write]\" title=\"写作\"&gt; &lt;input type=\"checkbox\" name=\"like[read]\" title=\"阅读\" checked=\"\"&gt; &lt;input type=\"checkbox\" name=\"like[game]\" title=\"游戏\"&gt;&lt;/div&gt; layui.$('#LAY-component-form-setval').on('click', function()&#123; form.val('example', &#123; \"like[write]\": true //复选框选中状态 &#125;); &#125;); 如果此时input是动态生成的，比如这样： 12345&lt;div class=\"layui-input-inline\" style=\"width:260px\"&gt; &#123;% for role in roles %&#125; &lt;input type=\"checkbox\" name=\"role[&#123;&#123; role.role_name &#125;&#125;]\" value=\"&#123;&#123; role.role_name &#125;&#125;\" title=\"&#123;&#123; role.role_name &#125;&#125;\"&gt; &#123;% endfor %&#125;&lt;/div&gt; 如果用这样的写法, 发现不好用，在浏览器里debug后发现，key被直接当错字符串传下去了，并没有翻译成真正的值，真是坑。 12345678var arr = data['roles'].split('#');$(\"input\").prop(\"checked\",false);$.each( arr, function( index, value ) &#123; key = \"role[\"+value+\"]\"; form.val('example', &#123; key: true //复选框选中状态 &#125;);&#125;); 所以只能改成这样的写法，用选择器点击上，但是样式没有发生变化，检查页面发现，checkbox的按钮实际上已经显示checked了。 123456var arr = data['roles'].split('#');$(\"input\").prop(\"checked\",false);$.each( arr, function( index, value ) &#123; key = \"role[\"+value+\"]\"; $(\"input[name='\"+key+\"']\").prop(\"checked\",true);&#125;); 查了文档后发现，只要重新渲染一下就可以了。 https://www.layui.com/doc/base/faq.html#form 1form.render('checkbox');","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"},{"name":"layui","slug":"layui","permalink":"http://www.tiaobug.com/tags/layui/"}]},{"title":"飞天信诚软件锁 rockey arm 在web环境下开发记录","slug":"2021-04-08-飞天信诚的加密狗软件锁在web环境下的开发","date":"2021-04-08T07:54:00.000Z","updated":"2021-04-14T08:11:37.193Z","comments":true,"path":"2021/04/08/2021-04-08-飞天信诚的加密狗软件锁在web环境下的开发/","link":"","permalink":"http://www.tiaobug.com/2021/04/08/2021-04-08-%E9%A3%9E%E5%A4%A9%E4%BF%A1%E8%AF%9A%E7%9A%84%E5%8A%A0%E5%AF%86%E7%8B%97%E8%BD%AF%E4%BB%B6%E9%94%81%E5%9C%A8web%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%BC%80%E5%8F%91/","excerpt":"","text":"需求：开发了一套web的系统，服务器端用的Python实现，现在需要客户用浏览器登录的时候检查客户电脑上是否插上了软件锁加密狗，如果有则继续登录，如果没有果断拒绝登录。 硬件采购：最后选择了飞天信诚的rockey ram，淘宝评价看起来不错。https://www.ftsafe.com.cn/products/rockey/ROCKEY-ARM从售前获取到的开发包是Rockey1Smart–V1.0007-20180201。 工作原理加密狗支持一系列的加密算法，当前的加密狗版本是内置RSA、ECC、DES、SHA1和国密算法（SM2、SM3、SM4）等高数据加密算法，我们这里直接选中RSA。加密狗提供管理软件和接口，允许我们写入需要的对应各种算法的密钥，同时又提供接口供我们调用，传入明文，就会得到密文。同时加密狗又能保证我们写入的密钥是完全不可以读出来的，这样就保证了私钥的安全。在需要验证加密狗的时候，比如登录的时候，我们先从服务器端申请一个10位的随机字符串，然后在浏览器调用JS API获取到加密狗计算的密文，然后把密文和账号密码一同发往服务器，服务用公钥和存在session里的随机字符串去验证这段密文是否有效，如果是就正常返回逻辑。另外如果服务器也需要保护的话，服务器上也插上软件锁加密狗，但是加密狗里存的是公钥，服务器端验证的时候直接调用加密狗的算法去验证，而不是自己算，这样就保证了公钥的安全。 开发工作：准备部分 客户端OS装上一个EXE的插件，插件在开发包里的位置sdk\\Extends\\Samples\\Multi-Browser\\JavaScript\\JSRockeyArmWebSocketSetup_x64.exe, 或者JSRockeyArmWebSocketSetup.exe。 据观察这个插件安装完成后会启动一个websocket服务，运行在浏览器里的js代码会发消息给这个websocket服务，然后由这个websocket服务去跟软件锁加密狗沟通，所以这个插件按照设计应该是可以跨浏览器的。 使用sdk\\Tools\\RyARMTool.exe配置软件锁加密狗，进行唯一化操作，牢记管理员密码！！！如果丢了，只能返厂了。 选择“文件管理”，“文件类型”选“RAS私钥文件”，然后“生成”秘钥对， dog.Rsapri和dog.Rsapub。 点“创建”按钮，填入文件ID“0002”，创建, 这个对应后面js文件里RsaPriFileID。 点刚刚创建的文件，然后“写私钥”，选择刚刚创建的“dog.Rsapri”。 利用sdk\\Tools\\Rsa2PemTool.exe将刚刚生成的秘钥对转成可读的pem文件，注意选择“RSA到PEM”，得到dog.pri.pem和dog.pub.pem。注意后面要用到这个dog.pub.pem。 如果后期发现这个文件的顶部不是“—–BEGIN PUBLIC KEY—–”，而是多了一个RSA，需要在这个网站转成der，然后再把der转成pem,就可以了。https://www.ssleye.com/der_pem.html 前端代码 引入3个js文件 sdk\\Extends\\Samples\\Multi-Browser\\JavaScript\\base64.js sdk\\Extends\\Samples\\Multi-Browser\\JavaScript\\test.js sdk\\Extends\\Samples\\Multi-Browser\\JavaScript\\websocket.js 登录页面1234567891011121314151617181920212223242526&lt;div class=\"login-content\"&gt; &lt;div class=\"form\"&gt; &lt;img src=\"../static/images/login/avatar.svg\"&gt; &lt;h2 class=\"title\"&gt; &lt;/h2&gt; &lt;div style=\"min-height:50px;vertical-align:top;text-align;color:orange\"&gt;&lt;h5 id=\"feedback\"&gt;&lt;/h5&gt;&lt;/div&gt; &lt;div class=\"input-div one\"&gt; &lt;div class=\"i\"&gt; &lt;i class=\"fa fa-user\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"div\"&gt; &lt;h5&gt;用户名&lt;/h5&gt; &lt;input id=\"login-user\" type=\"text\" class=\"input\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"input-div pass\"&gt; &lt;div class=\"i\"&gt; &lt;i class=\"fa fa-lock\"&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=\"div\"&gt; &lt;h5&gt;密码&lt;/h5&gt; &lt;input id= \"login-pass\" type=\"password\" class=\"input\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;input id=\"login-button\" type=\"submit\" class=\"btn\" value=\"登录\"&gt; &lt;/div&gt;&lt;/div&gt; JS逻辑， 页面打开的时候就去检查加密狗状态，登录按钮触发后再去调用加密接口。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126var ctrl = null;var websock = true;var b = new Base64();var ArmHandle; //加密锁句柄function message(status, shake = false, id = \"\") &#123; if (shake) &#123; $(\"#\" + id).effect(\"shake\", &#123; direction: \"right\", times: 2, distance: 8 &#125;, 250); &#125; document.getElementById(\"feedback\").innerHTML = status; $(\"#feedback\").show().delay(3000).fadeOut();&#125;//从服务器端获取安全码var get_safe_code = function () &#123; $.post(&#123; type: \"GET\", url: \"/api/auth/login\", error(response)&#123; message('错误：无法连接服务器，请稍后重试。',true, \"signup-box\"); &#125;, success(response) &#123; //调用加密算法 Arm_RsaPri(response['safe_code']) &#125; &#125;);&#125;;var login = function(ras_code)&#123; $.post(&#123; type: \"POST\", url: \"/api/auth/login\", data: &#123; \"username\": $(\"#login-user\").val(), \"password\": $(\"#login-pass\").val(), \"rsa_code\": ras_code &#125;, error(response)&#123; message('错误：用户名或者密码错',true, \"signup-box\"); &#125;, success(response) &#123; window.location.href = '/home' &#125; &#125;);&#125;function checkSafeDog()&#123; try&#123; ctrl = new AtlCtrlForRockeyArm(\"&#123;33020048-3E6B-40BE-A1D4-35577F57BF14&#125;\"); &#125;catch (e)&#123; ctrl = null; websock = false; &#125; ctrl.ready(function()&#123; ctrl.Arm_Enum(function(result, response)&#123; if (!result)&#123; alert(\"Arm_Enum error. \" + response); &#125;else&#123; rtn = response;// alert(\"找到锁的个数为：\" + rtn); &#125; &#125;); Index = 0; ctrl.Arm_Open(function(result, response)&#123; if (!result)&#123; alert(\"Arm_Open error. \" + response); &#125;else&#123; ArmHandle = response; console.log(\"加密锁句柄为：\" + ArmHandle); if (parseInt(ArmHandle) &lt; 0)&#123; message('错误：加密狗连接失败，请插入后刷新。',true, \"signup-box\"); &#125;else&#123; message('加密狗连接成功') &#125; &#125; &#125;); &#125;);&#125;//Rsa私钥运算function Arm_RsaPri(code)&#123; Handle = ArmHandle; RsaPriFileID = 0002; RsaPriFileSize = 1024; //文件ID为RsaPriFileID的位数，取值为1024或2048 RsaPri_Flag = 0; RsaPriInData = b.encode(code); ctrl.Arm_RsaPri(function(result,response)&#123; if (!result)&#123; alert(\"Arm_RsaPri error. \" + response); return null; &#125;else&#123; //私钥加密后的数据经过了base64编码传出 RsaPriData = response; console.log(\"密文：\" + RsaPriData); if (parseInt(RsaPriData) &lt; 0 )&#123; message('错误：加密狗连接失败，请插入后刷新。',true, \"signup-box\"); &#125;else&#123; //调用登录 login(RsaPriData) &#125; &#125; &#125;);&#125;$(document).ready(function () &#123; // 添加登录时间给登录按钮 $(document).on(\"click\", \"#login-button\", get_safe_code); $(document).keypress(function (e) &#123; if (e.which === 13) &#123; get_safe_code(); &#125; &#125;); //页面启动的时候检查加密狗状态 checkSafeDog();&#125;); 服务端 Python API。这个地方比较坑的是，python的RSA加密库有好几个版本，尝试了所有，发现都无法正常用公钥验证，怀疑和证书的版本有关系，最后没办法选择使用PHP来搞定。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849@ns.route('/login')class Userlogin(Resource): def post(self): form = user_form.UserForm(request.form) if form.validate(): username = request.form['username'].lower() password = request.form['password'] rsa_code = request.form['rsa_code'] if rsa_code: result = check_rsa_code(rsa_code) if not (result and 'safe_code' in result and result['safe_code'] == session['safe_code']): return json_failed('加密狗密文校验失败') else: return json_failed('需要加密狗密文字段') flag, token = user_dao.credentials_valid(username, password) if flag: return json_success(token=token) else: return json_failed('用户名或者密码错') else: return json_failed() # 返回安全码 def get(self): safe_code = ''.join(str(random.choice(range(10))) for _ in range(10)) session['safe_code'] = safe_code #放入session用于验证 return json_success(safe_code=safe_code)def check_rsa_code(rsa_code): check_url = \"http://&lt;php_server_ip_port&gt;/decode.php?encrypted='%s'\" % rsa_code act = getattr(requests, 'post') res = act(check_url).json() return resdef json_success(msg='', **kwargs, ): if \"code\" not in kwargs: code = 200 else: code = kwargs['code'] return dict(&#123;'status': 'success', 'msg': msg&#125;, **kwargs), codedef json_failed(msg='', **kwargs): if \"code\" not in kwargs: code = 500 else: code = kwargs['code'] return dict(&#123;'status': 'failed', 'msg': msg&#125;, **kwargs), code PHP代码，第4步中的check_url指向的服务器,建议直接使用phpstudy的一键部署PHP环境。1yum install -y wget &amp;&amp; wget -O install.sh https://notdocker.xp.cn/install.sh &amp;&amp; sh install.sh 把下面的代码放入/www/admin/localhost_80/wwwroot/decode.php, 其中的$public_key来自dog.pub.pem。1234567891011121314151617181920212223242526&lt;?php$public_key = '-----BEGIN PUBLIC KEY-----xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-----END PUBLIC KEY-----';$pu_key = openssl_pkey_get_public($public_key);$encrypted=rawurldecode(urlencode(urldecode($_GET['encrypted'])));$decrypted = \"\";openssl_public_decrypt(base64_decode($encrypted),$decrypted,$pu_key);header('Content-Type:text/json;charset=utf-8');$str = array ( 'safe_code'=&gt;$decrypted );$jsonencode = json_encode($str);echo $jsonencode;?&gt; 后期工作现在只是在登录界面进行了验证，理论上在Token等授权有效期内，如果用户不访问登录界面，加密狗就不会被验证，所以加密狗是可以被拔下来在其他的电脑上登录的。后面可以添加如下的功能去预防这种情况。 每次API访问后，服务端在after_request拦截器里都更新一下session里的安全码，并把安全码放入到reponse的header里。 浏览器收到response后，把安全码放入到cookie中。 再次发起请求时，把cookie里的安全码进行加密并放到request的header里发送出去。 服务端在before_request拦截器里取出header里的密文进行验证。 这样基本上就能实现时刻验证加密狗的存在了，但是应该会损失一下效率，在客户端不多的情况下，完全可以使用。","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"},{"name":"Python","slug":"Python","permalink":"http://www.tiaobug.com/tags/Python/"},{"name":"softdog","slug":"softdog","permalink":"http://www.tiaobug.com/tags/softdog/"},{"name":"PHP","slug":"PHP","permalink":"http://www.tiaobug.com/tags/PHP/"}]},{"title":"安全提取字符串中的数字","slug":"2021-03-01-Python安全提取字符串中的数字","date":"2021-03-01T05:58:28.000Z","updated":"2021-03-02T06:00:26.255Z","comments":true,"path":"2021/03/01/2021-03-01-Python安全提取字符串中的数字/","link":"","permalink":"http://www.tiaobug.com/2021/03/01/2021-03-01-Python%E5%AE%89%E5%85%A8%E6%8F%90%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%97/","excerpt":"","text":"去除输入中的字母和其他字符，只留下数字 12345data = filter(lambda ch: ch in '0123456789.', str(data))if len(list(data)) &gt; 0: return float(str(''.join(list(data))))else: return 0.0","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"},{"name":"Python","slug":"Python","permalink":"http://www.tiaobug.com/tags/Python/"}]},{"title":"一个从天天基金网上爬取信息的工具","slug":"2021-02-01-ETF","date":"2021-02-01T01:58:28.000Z","updated":"2021-02-01T02:08:25.545Z","comments":true,"path":"2021/02/01/2021-02-01-ETF/","link":"","permalink":"http://www.tiaobug.com/2021/02/01/2021-02-01-ETF/","excerpt":"","text":"给朋友帮忙，需要根据天天基金–场内交易基金净值折价率一览表把每个基金的前十名的股票持仓信息做到同一个表格中，用于后面的基金分析和挑选。 列表： http://fund.eastmoney.com/cnjy_jzzzl.html 总结几点： Python操作Excel还是略有些复杂，尤其是需要在表格中加入超链接，如果目的最后是为了得到表格，那么可以把数据生成一个网页table，然后直接拷贝到表格中，数据会很规整。 Chrmoet的debug工具中，可以直接选中DOM元素，然后右键拷贝它的XPAHT。 Python的lxml包在解析xpath时是无法识别tbody标签的，所以如果拷贝出来的XPATH如果有tbody，一定要删掉，否则解析的结果是[]。 天天基金网的网页的元素会因为不同的基金导致取出来的元素的XPATH略有不同，真是坑。 代码地址： https://github.com/skeetwu/ETF","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"work - share - Python","slug":"work-share-Python","permalink":"http://www.tiaobug.com/tags/work-share-Python/"}]},{"title":"来自芬兰的Ni Hao","slug":"2021-01-19-老外的中文","date":"2021-01-19T02:17:28.000Z","updated":"2021-01-19T02:15:24.097Z","comments":true,"path":"2021/01/19/2021-01-19-老外的中文/","link":"","permalink":"http://www.tiaobug.com/2021/01/19/2021-01-19-%E8%80%81%E5%A4%96%E7%9A%84%E4%B8%AD%E6%96%87/","excerpt":"","text":"收到一个来自芬兰的同事的Ni Hao, 还挺高兴。第一次直接在ticket里回复中文。","categories":[{"name":"Common","slug":"Common","permalink":"http://www.tiaobug.com/categories/Common/"}],"tags":[{"name":"work","slug":"work","permalink":"http://www.tiaobug.com/tags/work/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"PyCharm 路径符号从斜线变成了人民币符号","slug":"2021-01-12-PyCharm路径符号","date":"2021-01-12T08:27:16.000Z","updated":"2021-01-12T08:42:24.835Z","comments":true,"path":"2021/01/12/2021-01-12-PyCharm路径符号/","link":"","permalink":"http://www.tiaobug.com/2021/01/12/2021-01-12-PyCharm%E8%B7%AF%E5%BE%84%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"PyCharm 路径符号从斜线\\变成了人民币￥符号, 这个应该是字体的原因引起的。 修改方法： Setting – Appearance – Override default fond by (not recommmended), 去掉选中。 Setting – Edit – Font – Show only monospaced fonts (选中) – 字体推荐（Source Code Pro）。 这样应该就可以正常的显示路径了。","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://www.tiaobug.com/tags/Python/"},{"name":"PyCharm","slug":"PyCharm","permalink":"http://www.tiaobug.com/tags/PyCharm/"}]},{"title":"2020 end","slug":"2020-12-31-2020 end","date":"2020-12-31T07:05:40.000Z","updated":"2021-01-26T08:37:39.317Z","comments":true,"path":"2020/12/31/2020-12-31-2020 end/","link":"","permalink":"http://www.tiaobug.com/2020/12/31/2020-12-31-2020%20end/","excerpt":"","text":"一场疫情，改变了太多！所在的部门，从全site最有前途的组一下子变成了最风雨飘摇的组。上半年忙死，下半年组里动荡，大家都接近于划水摸鱼的状态。但是不管无论未来如何，都要把自己收拾利索，无论何时都要有能力去面对新的工作挑战。 年终统计，CSFS ticket总数373，刷出了一个破纪录的数据，开心，完结撒花。goodbye 2020， good luck 2021!","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"work","slug":"work","permalink":"http://www.tiaobug.com/tags/work/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"Bash 一张图记住快捷键","slug":"2020-12-02-bash 快捷键一张图","date":"2020-12-02T02:28:40.000Z","updated":"2021-01-26T08:37:45.159Z","comments":true,"path":"2020/12/02/2020-12-02-bash 快捷键一张图/","link":"","permalink":"http://www.tiaobug.com/2020/12/02/2020-12-02-bash%20%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E5%BC%A0%E5%9B%BE/","excerpt":"","text":"一张图记住快捷键","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"work","slug":"work","permalink":"http://www.tiaobug.com/tags/work/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"Ansible从一个target node取值并赋值给所有的target node","slug":"2020-10-26-Ansible从一个target node取值并赋值给所有的target node","date":"2020-10-26T07:10:00.000Z","updated":"2021-01-26T08:37:49.225Z","comments":true,"path":"2020/10/26/2020-10-26-Ansible从一个target node取值并赋值给所有的target node/","link":"","permalink":"http://www.tiaobug.com/2020/10/26/2020-10-26-Ansible%E4%BB%8E%E4%B8%80%E4%B8%AAtarget%20node%E5%8F%96%E5%80%BC%E5%B9%B6%E8%B5%8B%E5%80%BC%E7%BB%99%E6%89%80%E6%9C%89%E7%9A%84target%20node/","excerpt":"","text":"Ansible操作三个node，其中有一个pod(app_api_pod_name)运行其中的一个上。Step 1 需要判断这个pod中有没有存在一个文件，这个地方希望只在第一个node1上执行就可以了，这样其他的node都会skip，如果是这样skip其他的node的时候，仍然会进行赋值，导致最后的结果是CA_exist无法registe，除了node1，其他node拿到CA_exist都是空值。所以这个地方就理解了，ansible的所有变量，包括常量和临时变量都是按node进行区分和隔离的，不能共享。 Step 2 就是用来解决这个问题，在其他的node的变量组把这个值给赋值上，关键取值 hostvars[groups[‘role_control’][0]].CA_exist.rc 123456789101112- name: check if CA exist in app-api become: yes shell: \"kubectl exec -it &#123;&#123; app_api_pod_name.stdout_lines[0] &#125;&#125; cat /etc/pki/ca-trust/source/anchors/xxxca.pem -n xxxx\" ignore_errors: yes register: CA_exist when: \"inventory_hostname == groups['role_control'][0] and app_api_pod_name is defined\"- name: set if need to copy CA set_fact: need_copy: \"&#123;&#123; hostvars[groups['role_control'][0]].CA_exist.rc &#125;&#125;\" when: \"hostvars[groups['role_control'][0]].CA_exist is defined and hostvars[groups['role_control'][0]].CA_exist.rc == 1\"","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://www.tiaobug.com/tags/blog/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"天冷了","slug":"2020-10-14-天冷了","date":"2020-10-14T02:46:40.000Z","updated":"2020-11-09T06:31:12.440Z","comments":true,"path":"2020/10/14/2020-10-14-天冷了/","link":"","permalink":"http://www.tiaobug.com/2020/10/14/2020-10-14-%E5%A4%A9%E5%86%B7%E4%BA%86/","excerpt":"","text":"感觉突然就天冷了，好像还没准备好，夏天就过去了，秋天也过去了。供暖费都交了，下个月就开始供暖了。减肥减的不抗冻了，晚上得穿上秋裤才能出去溜娃。工作的事情搞的有点糟心，不要乱，相信美好的事情总会发生的。","categories":[{"name":"Common","slug":"Common","permalink":"http://www.tiaobug.com/categories/Common/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.tiaobug.com/tags/%E7%94%9F%E6%B4%BB/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"两个有趣的视频","slug":"2020-09-16-两个有趣的视频","date":"2020-09-08T02:46:40.000Z","updated":"2020-11-09T06:31:12.439Z","comments":true,"path":"2020/09/08/2020-09-16-两个有趣的视频/","link":"","permalink":"http://www.tiaobug.com/2020/09/08/2020-09-16-%E4%B8%A4%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E8%A7%86%E9%A2%91/","excerpt":"","text":"您的浏览器不支持播放该视频！您的浏览器不支持播放该视频！","categories":[{"name":"Common","slug":"Common","permalink":"http://www.tiaobug.com/categories/Common/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.tiaobug.com/tags/%E7%94%9F%E6%B4%BB/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"现实远比梦想更壮丽","slug":"2020-09-04-现实远比梦想更壮丽 - Copy","date":"2020-09-04T08:46:40.000Z","updated":"2020-11-09T06:31:12.438Z","comments":true,"path":"2020/09/04/2020-09-04-现实远比梦想更壮丽 - Copy/","link":"","permalink":"http://www.tiaobug.com/2020/09/04/2020-09-04-%E7%8E%B0%E5%AE%9E%E8%BF%9C%E6%AF%94%E6%A2%A6%E6%83%B3%E6%9B%B4%E5%A3%AE%E4%B8%BD%20-%20Copy/","excerpt":"","text":"从每一帧都可以当壁纸的电影中截了一帧，做张壁纸。","categories":[{"name":"Common","slug":"Common","permalink":"http://www.tiaobug.com/categories/Common/"}],"tags":[{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"},{"name":"movie","slug":"movie","permalink":"http://www.tiaobug.com/tags/movie/"}]},{"title":"来自火线的工单","slug":"2020-08-21-来自火线的工单","date":"2020-08-21T01:14:40.000Z","updated":"2020-11-09T06:31:12.437Z","comments":true,"path":"2020/08/21/2020-08-21-来自火线的工单/","link":"","permalink":"http://www.tiaobug.com/2020/08/21/2020-08-21-%E6%9D%A5%E8%87%AA%E7%81%AB%E7%BA%BF%E7%9A%84%E5%B7%A5%E5%8D%95/","excerpt":"","text":"今天一上班，收到一条来自火线的工单~","categories":[{"name":"Common","slug":"Common","permalink":"http://www.tiaobug.com/categories/Common/"}],"tags":[{"name":"work","slug":"work","permalink":"http://www.tiaobug.com/tags/work/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"判断OS的Host是虚拟机还是物理机","slug":"2020-08-05-判断OS的Host是虚拟机还是物理机","date":"2020-08-05T04:36:00.000Z","updated":"2021-01-26T08:38:04.460Z","comments":true,"path":"2020/08/05/2020-08-05-判断OS的Host是虚拟机还是物理机/","link":"","permalink":"http://www.tiaobug.com/2020/08/05/2020-08-05-%E5%88%A4%E6%96%ADOS%E7%9A%84Host%E6%98%AF%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%98%E6%98%AF%E7%89%A9%E7%90%86%E6%9C%BA/","excerpt":"","text":"12345[root@pearl-cw01 ~]# dmidecode -s system-product-nameProLiant BL460c Gen9[root@vm-10-75-112-151 ~]# dmidecode -s system-product-nameOpenStack Compute","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://www.tiaobug.com/tags/blog/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"linux磁盘分区文件系统filesystem损坏后修复","slug":"2020-07-27-linux磁盘分区文件系统filesystem损坏后修复","date":"2020-07-27T08:45:00.000Z","updated":"2021-01-26T08:38:09.499Z","comments":true,"path":"2020/07/27/2020-07-27-linux磁盘分区文件系统filesystem损坏后修复/","link":"","permalink":"http://www.tiaobug.com/2020/07/27/2020-07-27-linux%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9Ffilesystem%E6%8D%9F%E5%9D%8F%E5%90%8E%E4%BF%AE%E5%A4%8D/","excerpt":"","text":"openstack中把volume detach掉后，重新attach回来会有一定概率导致分区无法挂载，手动mount一下后会发现报错filesystem无法识别。表象可能是lsblk和df显示的磁盘大小不一致。主动指明成ext4后再次mount后，仍然会是失败，这个时候就需要手动恢复一下filesystem了。 先把磁盘去掉挂载, 以下均以/dev/vdb为例 1# unmount &#x2F;dev&#x2F;vdb 如果失败，则修改/etc/fstab里的记录，注释掉挂载，然后重启OS。 用fsck检查磁盘 12345678# e2fsck &#x2F;dev&#x2F;vdbe2fsck 1.41.12 (17-May-2010)Pass 1:Checking inodes, blocks, and sizesPass 2:Checking directory structurePass 3:Checking directory connectivityPass 4:Checking reference countsPass 5:Checking group sumary informationext4-1:11&#x2F;131072 files (0.0% non-contiguous),27050&#x2F;524128 blocks 用resize2fs重新恢复一次磁盘filesystem 1234# resize2fs &#x2F;dev&#x2F;vdbresize2fs 1.41.12 (17-May-2010)Resizing the filesystem on &#x2F;dev&#x2F;vdb to 524128 (1k) blocks.The filesystem on &#x2F;dev&#x2F;vdb is now 524128 blocks long. 再次mount回来，检查文件。 1# mount &#x2F;dev&#x2F;vdb &#x2F;data0","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://www.tiaobug.com/tags/blog/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"一个专门分享One Page Websites的网站","slug":"2020-07-17-一个专门分享One Page Websites的网站","date":"2020-07-17T08:12:00.000Z","updated":"2021-01-26T08:38:13.619Z","comments":true,"path":"2020/07/17/2020-07-17-一个专门分享One Page Websites的网站/","link":"","permalink":"http://www.tiaobug.com/2020/07/17/2020-07-17-%E4%B8%80%E4%B8%AA%E4%B8%93%E9%97%A8%E5%88%86%E4%BA%ABOne%20Page%20Websites%E7%9A%84%E7%BD%91%E7%AB%99/","excerpt":"","text":"给朋友要做一个简单的企业的展示站，想找一个单页的响应式源码，转了老半天，也没看到国内有免费的可以用。最后发现下面这个站，还挺好的，Mark一下。 https://onepagelove.com/ 选了一个比较简单的，改动后的效果 http://www.greenwater.tech","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://www.tiaobug.com/tags/blog/"},{"name":"OPW","slug":"OPW","permalink":"http://www.tiaobug.com/tags/OPW/"},{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"}]},{"title":"转到HEXO了","slug":"2020-06-29-转到HEXO","date":"2020-06-29T02:18:00.000Z","updated":"2020-11-09T06:31:12.432Z","comments":true,"path":"2020/06/29/2020-06-29-转到HEXO/","link":"","permalink":"http://www.tiaobug.com/2020/06/29/2020-06-29-%E8%BD%AC%E5%88%B0HEXO/","excerpt":"","text":"Jekyll安装主题太麻烦，也许是没找到路子。Jekyll依赖的Ruby的环境在我本地始终没有配置成功，尝试了好几遍，弃了。 决定试探一下HEXO，基于npm安装的，主题安装比较容易，改起来也挺简单。唯一的遗憾是Jekyll全部代码push到github，github是可以自动编译的，但是HEXO需要在本地产生静态代码，然后把所有的静态代码push到github里去。但是整体的效果还是挺满意的，换了。","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://www.tiaobug.com/tags/blog/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.tiaobug.com/tags/Hexo/"}]},{"title":"水面的鸭子","slug":"2020-06-24-水面的鸭子","date":"2020-06-24T06:00:00.000Z","updated":"2020-11-09T06:31:12.430Z","comments":true,"path":"2020/06/24/2020-06-24-水面的鸭子/","link":"","permalink":"http://www.tiaobug.com/2020/06/24/2020-06-24-%E6%B0%B4%E9%9D%A2%E7%9A%84%E9%B8%AD%E5%AD%90/","excerpt":"","text":"安静平和的生活，需要处处暗自努力。就像水面的鸭子，看似悠然自得，其实水下小腿紧倒腾！","categories":[{"name":"Common","slug":"Common","permalink":"http://www.tiaobug.com/categories/Common/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://www.tiaobug.com/tags/%E7%94%9F%E6%B4%BB/"},{"name":"日常","slug":"日常","permalink":"http://www.tiaobug.com/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"python编译为pyc","slug":"2020-06-18-编译python为pyc","date":"2020-06-18T06:00:00.000Z","updated":"2021-01-12T08:42:49.932Z","comments":true,"path":"2020/06/18/2020-06-18-编译python为pyc/","link":"","permalink":"http://www.tiaobug.com/2020/06/18/2020-06-18-%E7%BC%96%E8%AF%91python%E4%B8%BApyc/","excerpt":"","text":"123456#递归编译当前目录下的所有code为pyc，-b表示在原位置生成，不放到pycache里python3 -m compileall -b ./#删除掉所有的py文件find . -name “*.py” |xargs rm -rf#删除掉换成文件find . -name “pycache” |xargs rm -rf","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"complie","slug":"complie","permalink":"http://www.tiaobug.com/tags/complie/"},{"name":"Python","slug":"Python","permalink":"http://www.tiaobug.com/tags/Python/"}]},{"title":"bash 快捷键","slug":"2020-06-17-bash 快捷键","date":"2020-06-17T08:14:40.000Z","updated":"2020-11-09T06:31:12.428Z","comments":true,"path":"2020/06/17/2020-06-17-bash 快捷键/","link":"","permalink":"http://www.tiaobug.com/2020/06/17/2020-06-17-bash%20%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"突然发现bash提供的快捷键也是非常的好用，整理一下。","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://www.tiaobug.com/tags/shell/"},{"name":"bash","slug":"bash","permalink":"http://www.tiaobug.com/tags/bash/"},{"name":"快捷键","slug":"快捷键","permalink":"http://www.tiaobug.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"}]},{"title":"检查磁盘的IO性能是否能匹配ETCD的需求","slug":"2020-05-28-检查磁盘的IO性能是否能匹配ETCD的需求","date":"2020-05-28T03:14:40.000Z","updated":"2021-01-26T08:38:34.901Z","comments":true,"path":"2020/05/28/2020-05-28-检查磁盘的IO性能是否能匹配ETCD的需求/","link":"","permalink":"http://www.tiaobug.com/2020/05/28/2020-05-28-%E6%A3%80%E6%9F%A5%E7%A3%81%E7%9B%98%E7%9A%84IO%E6%80%A7%E8%83%BD%E6%98%AF%E5%90%A6%E8%83%BD%E5%8C%B9%E9%85%8DETCD%E7%9A%84%E9%9C%80%E6%B1%82/","excerpt":"","text":"https://www.ibm.com/cloud/blog/using-fio-to-tell-whether-your-storage-is-fast-enough-for-etcd 123456789101112131415161718192021222324252627282930313233343536373839404142# mkdir test-data# fio --rw=write --ioengine=sync --fdatasync=1 --directory=test-data --size=22m --bs=2300 --name=mytestmytest: (g=0): rw=write, bs=(R) 2300B-2300B, (W) 2300B-2300B, (T) 2300B-2300B, ioengine=sync, iodepth=1fio-3.7Starting 1 processmytest: Laying out IO file (1 file / 22MiB)Jobs: 1 (f=1): [W(1)][100.0%][r=0KiB/s,w=85KiB/s][r=0,w=38 IOPS][eta 00m:00s]mytest: (groupid=0, jobs=1): err= 0: pid=23832: Thu May 28 10:04:19 2020 write: IOPS=36, BW=81.9KiB/s (83.9kB/s)(21.0MiB/274912msec) clat (usec): min=11, max=12185, avg=33.60, stdev=182.66 lat (usec): min=12, max=12187, avg=36.18, stdev=182.68 clat percentiles (usec): | 1.00th=[ 17], 5.00th=[ 21], 10.00th=[ 22], 20.00th=[ 23], | 30.00th=[ 24], 40.00th=[ 27], 50.00th=[ 30], 60.00th=[ 31], | 70.00th=[ 32], 80.00th=[ 35], 90.00th=[ 42], 95.00th=[ 51], | 99.00th=[ 69], 99.50th=[ 80], 99.90th=[ 125], 99.95th=[ 775], | 99.99th=[11207] bw ( KiB/s): min= 4, max= 166, per=100.00%, avg=81.37, stdev=39.59, samples=549 iops : min= 2, max= 74, avg=36.43, stdev=17.59, samples=549 lat (usec) : 20=5.02%, 50=89.91%, 100=4.93%, 250=0.07%, 500=0.01% lat (usec) : 750=0.01%, 1000=0.03% lat (msec) : 10=0.01%, 20=0.02% fsync/fdatasync/sync_file_range: sync (msec): min=2, max=464, avg=27.36, stdev=31.73 sync percentiles (msec): | 1.00th=[ 3], 5.00th=[ 5], 10.00th=[ 6], 20.00th=[ 8], | 30.00th=[ 11], 40.00th=[ 19], 50.00th=[ 22], 60.00th=[ 24], | 70.00th=[ 26], 80.00th=[ 34], 90.00th=[ 57], 95.00th=[ 84], | 99.00th=[ 159], 99.50th=[ 220], 99.90th=[ 313], 99.95th=[ 330], | 99.99th=[ 414] cpu : usr=0.10%, sys=0.40%, ctx=24233, majf=0, minf=13 IO depths : 1=200.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0% submit : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% complete : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% issued rwts: total=0,10029,0,0 short=10029,0,0,0 dropped=0,0,0,0 latency : target=0, window=0, percentile=100.00%, depth=1Run status group 0 (all jobs): WRITE: bw=81.9KiB/s (83.9kB/s), 81.9KiB/s-81.9KiB/s (83.9kB/s-83.9kB/s), io=21.0MiB (23.1MB), run=274912-274912msecDisk stats (read/write): vda: ios=0/26445, merge=0/12218, ticks=0/359055, in_queue=343720, util=9.48% All you have to do then is look at the output and check if the 99th percentile of fdatasync durations is less than 10ms. If that is the case, then your storage is fast enough. Here is an example output: 主要是看fsync/fdatasync/sync_file_range的结果，单位是毫秒，如果99.00%的少于10毫秒，就说明这个disk是没问题，反之容易引起ETCD读写的问题。","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"ETCD","slug":"ETCD","permalink":"http://www.tiaobug.com/tags/ETCD/"},{"name":"fio","slug":"fio","permalink":"http://www.tiaobug.com/tags/fio/"}]},{"title":"分享几个前端大牛的site","slug":"2020-06-05-分享几个前端大牛的site","date":"2020-05-28T03:14:40.000Z","updated":"2020-11-09T06:31:12.426Z","comments":true,"path":"2020/05/28/2020-06-05-分享几个前端大牛的site/","link":"","permalink":"http://www.tiaobug.com/2020/05/28/2020-06-05-%E5%88%86%E4%BA%AB%E5%87%A0%E4%B8%AA%E5%89%8D%E7%AB%AF%E5%A4%A7%E7%89%9B%E7%9A%84site/","excerpt":"","text":"https://bruno-simon.com/ https://prior.co.jp/ https://www.orano.group/experience/innovation/en/slider https://thenewmobileworkforce.imm-g-prod.com/ http://gleec.imm-g-prod.com/instant-messages https://www.refletcommunication.com/en/youth","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"FE","slug":"FE","permalink":"http://www.tiaobug.com/tags/FE/"},{"name":"js","slug":"js","permalink":"http://www.tiaobug.com/tags/js/"}]},{"title":"sqlalchercy can not create table automatically","slug":"2020-05-27-sqlalchercy create table automatically","date":"2020-05-27T03:14:40.000Z","updated":"2021-04-08T01:43:09.012Z","comments":true,"path":"2020/05/27/2020-05-27-sqlalchercy create table automatically/","link":"","permalink":"http://www.tiaobug.com/2020/05/27/2020-05-27-sqlalchercy%20create%20table%20automatically/","excerpt":"","text":"按照教程书写python的定义表的model文件，正常情况下是没有问题，能自动映射成数据库里的表，但是有一种情况就是无法生成。 例如下面的代码的路径是，ssms/utils/db_tool.py 123456789101112131415161718192021222324252627282930# -*- coding: utf-8 -*-from contextlib import contextmanagerfrom sqlalchemy import create_enginefrom sqlalchemy.orm import sessionmakerfrom ssms.utils.db_setting import SSMS_DB_BaseSQLALCHEMY_DATABASE_URI = 'sqlite:///db/accounts.db'engine = create_engine(SQLALCHEMY_DATABASE_URI, echo=True) # Connect to database# engine = create_engine(SQLALCHEMY_DATABASE_URI) # Connect to databaseSSMS_DB_Base.metadata.create_all(engine) # Create models@contextmanagerdef session_scope(): \"\"\"Provide a transactional scope around a series of operations.\"\"\" s = sessionmaker(bind=engine)() s.expire_on_commit = False try: yield s s.commit() except: s.rollback() raise finally: s.close() 所有的model的文件的路径是ssms/beans/*.py 然后就会发现，有些表可以映射，有些表无法映射，非常之奇怪。最后猜测是python的文件加载顺序导致的，所以在每个model和db_tool.py里加了一个print 命令打印点东西到控制台，证实在db_tool.py前加载的都可以映射，在后面加载的就没法映射的了，那么如何解呢？ 在ssms/utils/init.py文件里全部import一遍所有的model，那么这样就能保证在ssms/utils/目录下，加载db_tool.py之前所有的model都被加载好了，这样就可以全部映射了。 亲测好用！ update at 2021年4月8日09:41:44看起来Flask-Migrate更加容易和强大。https://flask-migrate.readthedocs.io/en/latest/","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"sqlalchercy","slug":"sqlalchercy","permalink":"http://www.tiaobug.com/tags/sqlalchercy/"}]},{"title":"SSH port","slug":"2020-05-15-SSH port","date":"2020-05-15T03:14:40.000Z","updated":"2020-11-09T06:31:12.421Z","comments":true,"path":"2020/05/15/2020-05-15-SSH port/","link":"","permalink":"http://www.tiaobug.com/2020/05/15/2020-05-15-SSH%20port/","excerpt":"","text":"Why ssh port is 22? https://www.ssh.com/ssh/port","categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://www.tiaobug.com/tags/shell/"},{"name":"ssh","slug":"ssh","permalink":"http://www.tiaobug.com/tags/ssh/"}]}],"categories":[{"name":"Tech","slug":"Tech","permalink":"http://www.tiaobug.com/categories/Tech/"},{"name":"Common","slug":"Common","permalink":"http://www.tiaobug.com/categories/Common/"}],"tags":[{"name":"share","slug":"share","permalink":"http://www.tiaobug.com/tags/share/"},{"name":"Python","slug":"Python","permalink":"http://www.tiaobug.com/tags/Python/"},{"name":"layui","slug":"layui","permalink":"http://www.tiaobug.com/tags/layui/"},{"name":"softdog","slug":"softdog","permalink":"http://www.tiaobug.com/tags/softdog/"},{"name":"PHP","slug":"PHP","permalink":"http://www.tiaobug.com/tags/PHP/"},{"name":"work - share - Python","slug":"work-share-Python","permalink":"http://www.tiaobug.com/tags/work-share-Python/"},{"name":"work","slug":"work","permalink":"http://www.tiaobug.com/tags/work/"},{"name":"PyCharm","slug":"PyCharm","permalink":"http://www.tiaobug.com/tags/PyCharm/"},{"name":"blog","slug":"blog","permalink":"http://www.tiaobug.com/tags/blog/"},{"name":"生活","slug":"生活","permalink":"http://www.tiaobug.com/tags/%E7%94%9F%E6%B4%BB/"},{"name":"movie","slug":"movie","permalink":"http://www.tiaobug.com/tags/movie/"},{"name":"OPW","slug":"OPW","permalink":"http://www.tiaobug.com/tags/OPW/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.tiaobug.com/tags/Hexo/"},{"name":"日常","slug":"日常","permalink":"http://www.tiaobug.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"complie","slug":"complie","permalink":"http://www.tiaobug.com/tags/complie/"},{"name":"shell","slug":"shell","permalink":"http://www.tiaobug.com/tags/shell/"},{"name":"bash","slug":"bash","permalink":"http://www.tiaobug.com/tags/bash/"},{"name":"快捷键","slug":"快捷键","permalink":"http://www.tiaobug.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"name":"ETCD","slug":"ETCD","permalink":"http://www.tiaobug.com/tags/ETCD/"},{"name":"fio","slug":"fio","permalink":"http://www.tiaobug.com/tags/fio/"},{"name":"FE","slug":"FE","permalink":"http://www.tiaobug.com/tags/FE/"},{"name":"js","slug":"js","permalink":"http://www.tiaobug.com/tags/js/"},{"name":"sqlalchercy","slug":"sqlalchercy","permalink":"http://www.tiaobug.com/tags/sqlalchercy/"},{"name":"ssh","slug":"ssh","permalink":"http://www.tiaobug.com/tags/ssh/"}]}